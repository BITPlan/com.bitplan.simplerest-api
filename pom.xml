<!--
	Copyright (c) 2016 BITPlan GmbH

	Project details and license at:
	https://github.com/BITPlan/com.bitplan.simplerest-api

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.bitplan.rest</groupId>
	<artifactId>com.bitplan.simplerest-api</artifactId>
	<version>0.0.8</version>
	<name>Simple RESTFul Jersey API</name>
	<description>API for Jersey 1.x based apps</description>
	<packaging>jar</packaging>
	<url>https://github.com/BITPlan/com.bitplan.simplerest-api</url>
	<licenses>
		<license>
			<name>Apache 2.0 license</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
		</license>
	</licenses>
	<scm>
		<connection>scm:git:git://github.com/BITPlan/com.bitplan.simplerest-api.git</connection>
		<developerConnection>scm:git:git@github.com:BITPlan/com.bitplan.simplerest-api.git</developerConnection>
		<url>https://github.com/BITPlan/com.bitplan.simplerest-api</url>
	</scm>
	<issueManagement>
		<url>https://github.com/BITPlan/com.bitplan.simplerest-api/issues</url>
		<system>GitHub</system>
	</issueManagement>
	<developers>
		<developer>
			<id>wf</id>
			<name>Wolfgang Fahl</name>
			<organization>BITPlan GmbH</organization>
			<organizationUrl>http://www.bitplan.com</organizationUrl>
		</developer>
	</developers>
	<properties>
		<!-- http://stackoverflow.com/questions/3017695/how-to-configure-encoding-in-maven -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- github server corresponds to entry in ~/.m2/settings.xml -->
		<github.global.server>github</github.global.server>
	</properties>
	<dependencies>
	</dependencies>
	<build>
		<sourceDirectory>src/main/java</sourceDirectory>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<plugin>
				<!-- http://code.mycila.com/license-maven-plugin/ -->
				<groupId>com.mycila.maven-license-plugin</groupId>
				<artifactId>maven-license-plugin</artifactId>
				<version>1.9.0</version>
				<configuration>
					<header>src/etc/header.txt</header>
					<includes>
						<include>src/**/*.java</include>
					</includes>
				</configuration>
			</plugin>
			<plugin>
				<!--
					see
					http://central.sonatype.org/pages/apache-maven.html

					Javadoc and Sources Attachments
					To get Javadoc and Source jar files generated, you have to configure
					the
					javadoc and source Maven plugins.
				-->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9.1</version>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!--
				GPG Signed Components
				The Maven GPG plugin is used to sign the components with the following
				configuration.
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-gpg-plugin</artifactId>
				<version>1.5</version>
				<executions>
					<execution>
						<id>sign-artifacts</id>
						<phase>verify</phase>
						<goals>
							<goal>sign</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- git hub site plugin https://github.com/github/maven-plugins -->
			<plugin>
				<groupId>com.github.github</groupId>
				<artifactId>site-maven-plugin</artifactId>
				<version>0.10</version>
				<configuration>
					<message>Creating site for ${project.version}</message>
					<repositoryName>com.bitplan.simplerest-api</repositoryName>      <!-- github repo name -->
					<repositoryOwner>BITPlan</repositoryOwner>    <!-- github username -->
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>site</goal>
						</goals>
						<phase>site</phase>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<extensions>
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-ssh</artifactId>
				<version>2.10</version>
			</extension>
		</extensions>
	</build>
		<profiles>
		<profile>
			<id>dist</id>
			<build>
				<plugins>

					<!--
						according to :

						http://central.sonatype.org/pages/apache-maven.html

						Nexus Staging Maven Plugin for Deployment and Release

						The Nexus Staging Maven Plugin is the recommended way to deploy your
						components
						to OSSRH and release them to the Central Repository.
						To configure it simply add the plugin to your Maven pom.xml.
					-->
					<plugin>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
						<version>1.6.3</version>
						<extensions>true</extensions>
						<configuration>
							<serverId>ossrh</serverId>
							<nexusUrl>https://oss.sonatype.org/</nexusUrl>
							<!-- set to true for automation -->
							<autoReleaseAfterClose>false</autoReleaseAfterClose>
						</configuration>
					</plugin>
					<!-- Maven release plugin -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-release-plugin</artifactId>
						<version>2.5</version>
						<configuration>
							<autoVersionSubmodules>true</autoVersionSubmodules>
							<useReleaseProfile>false</useReleaseProfile>
							<releaseProfiles>release</releaseProfiles>
							<goals>deploy</goals>
							<arguments>-Dgpg.passphrase=${gpg.passphrase}</arguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- 
		  Oracle - why do you force this workaround? - There's better stuff to
		  spend one's time with ... and the quality of the javadoc gets worse when
		  the feature is switched off. 
		  Work around Oracle's (IMHO very silly) decision to make doclint default. 
		  http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
		  http://stackoverflow.com/questions/15886209/maven-is-not-working-in-java-8-when-javadoc-tags-are-incomplete 
		-->
		<profile>
			<id>doclint-java8-disable</id>
			<activation>
				<jdk>[1.8,)</jdk>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<configuration>
							<additionalparam>-Xdoclint:none</additionalparam>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
